// Code generated by counterfeiter. DO NOT EDIT.
package toolsfakes

import (
	"dev/interview-craft/tools"
	"sync"

	"go.mongodb.org/mongo-driver/mongo"
)

type FakeMongoClient struct {
	AddProductToInventoryStub        func(string, string, interface{}) (*mongo.InsertOneResult, error)
	addProductToInventoryMutex       sync.RWMutex
	addProductToInventoryArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 interface{}
	}
	addProductToInventoryReturns struct {
		result1 *mongo.InsertOneResult
		result2 error
	}
	addProductToInventoryReturnsOnCall map[int]struct {
		result1 *mongo.InsertOneResult
		result2 error
	}
	DisplayInventoryStub        func(string, string, interface{}) error
	displayInventoryMutex       sync.RWMutex
	displayInventoryArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 interface{}
	}
	displayInventoryReturns struct {
		result1 error
	}
	displayInventoryReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateInventoryStub        func()
	updateInventoryMutex       sync.RWMutex
	updateInventoryArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMongoClient) AddProductToInventory(arg1 string, arg2 string, arg3 interface{}) (*mongo.InsertOneResult, error) {
	fake.addProductToInventoryMutex.Lock()
	ret, specificReturn := fake.addProductToInventoryReturnsOnCall[len(fake.addProductToInventoryArgsForCall)]
	fake.addProductToInventoryArgsForCall = append(fake.addProductToInventoryArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 interface{}
	}{arg1, arg2, arg3})
	stub := fake.AddProductToInventoryStub
	fakeReturns := fake.addProductToInventoryReturns
	fake.recordInvocation("AddProductToInventory", []interface{}{arg1, arg2, arg3})
	fake.addProductToInventoryMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMongoClient) AddProductToInventoryCallCount() int {
	fake.addProductToInventoryMutex.RLock()
	defer fake.addProductToInventoryMutex.RUnlock()
	return len(fake.addProductToInventoryArgsForCall)
}

func (fake *FakeMongoClient) AddProductToInventoryCalls(stub func(string, string, interface{}) (*mongo.InsertOneResult, error)) {
	fake.addProductToInventoryMutex.Lock()
	defer fake.addProductToInventoryMutex.Unlock()
	fake.AddProductToInventoryStub = stub
}

func (fake *FakeMongoClient) AddProductToInventoryArgsForCall(i int) (string, string, interface{}) {
	fake.addProductToInventoryMutex.RLock()
	defer fake.addProductToInventoryMutex.RUnlock()
	argsForCall := fake.addProductToInventoryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeMongoClient) AddProductToInventoryReturns(result1 *mongo.InsertOneResult, result2 error) {
	fake.addProductToInventoryMutex.Lock()
	defer fake.addProductToInventoryMutex.Unlock()
	fake.AddProductToInventoryStub = nil
	fake.addProductToInventoryReturns = struct {
		result1 *mongo.InsertOneResult
		result2 error
	}{result1, result2}
}

func (fake *FakeMongoClient) AddProductToInventoryReturnsOnCall(i int, result1 *mongo.InsertOneResult, result2 error) {
	fake.addProductToInventoryMutex.Lock()
	defer fake.addProductToInventoryMutex.Unlock()
	fake.AddProductToInventoryStub = nil
	if fake.addProductToInventoryReturnsOnCall == nil {
		fake.addProductToInventoryReturnsOnCall = make(map[int]struct {
			result1 *mongo.InsertOneResult
			result2 error
		})
	}
	fake.addProductToInventoryReturnsOnCall[i] = struct {
		result1 *mongo.InsertOneResult
		result2 error
	}{result1, result2}
}

func (fake *FakeMongoClient) DisplayInventory(arg1 string, arg2 string, arg3 interface{}) error {
	fake.displayInventoryMutex.Lock()
	ret, specificReturn := fake.displayInventoryReturnsOnCall[len(fake.displayInventoryArgsForCall)]
	fake.displayInventoryArgsForCall = append(fake.displayInventoryArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 interface{}
	}{arg1, arg2, arg3})
	stub := fake.DisplayInventoryStub
	fakeReturns := fake.displayInventoryReturns
	fake.recordInvocation("DisplayInventory", []interface{}{arg1, arg2, arg3})
	fake.displayInventoryMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMongoClient) DisplayInventoryCallCount() int {
	fake.displayInventoryMutex.RLock()
	defer fake.displayInventoryMutex.RUnlock()
	return len(fake.displayInventoryArgsForCall)
}

func (fake *FakeMongoClient) DisplayInventoryCalls(stub func(string, string, interface{}) error) {
	fake.displayInventoryMutex.Lock()
	defer fake.displayInventoryMutex.Unlock()
	fake.DisplayInventoryStub = stub
}

func (fake *FakeMongoClient) DisplayInventoryArgsForCall(i int) (string, string, interface{}) {
	fake.displayInventoryMutex.RLock()
	defer fake.displayInventoryMutex.RUnlock()
	argsForCall := fake.displayInventoryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeMongoClient) DisplayInventoryReturns(result1 error) {
	fake.displayInventoryMutex.Lock()
	defer fake.displayInventoryMutex.Unlock()
	fake.DisplayInventoryStub = nil
	fake.displayInventoryReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMongoClient) DisplayInventoryReturnsOnCall(i int, result1 error) {
	fake.displayInventoryMutex.Lock()
	defer fake.displayInventoryMutex.Unlock()
	fake.DisplayInventoryStub = nil
	if fake.displayInventoryReturnsOnCall == nil {
		fake.displayInventoryReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.displayInventoryReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMongoClient) UpdateInventory() {
	fake.updateInventoryMutex.Lock()
	fake.updateInventoryArgsForCall = append(fake.updateInventoryArgsForCall, struct {
	}{})
	stub := fake.UpdateInventoryStub
	fake.recordInvocation("UpdateInventory", []interface{}{})
	fake.updateInventoryMutex.Unlock()
	if stub != nil {
		fake.UpdateInventoryStub()
	}
}

func (fake *FakeMongoClient) UpdateInventoryCallCount() int {
	fake.updateInventoryMutex.RLock()
	defer fake.updateInventoryMutex.RUnlock()
	return len(fake.updateInventoryArgsForCall)
}

func (fake *FakeMongoClient) UpdateInventoryCalls(stub func()) {
	fake.updateInventoryMutex.Lock()
	defer fake.updateInventoryMutex.Unlock()
	fake.UpdateInventoryStub = stub
}

func (fake *FakeMongoClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addProductToInventoryMutex.RLock()
	defer fake.addProductToInventoryMutex.RUnlock()
	fake.displayInventoryMutex.RLock()
	defer fake.displayInventoryMutex.RUnlock()
	fake.updateInventoryMutex.RLock()
	defer fake.updateInventoryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMongoClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ tools.MongoClient = new(FakeMongoClient)
